# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-08-10 08:13
from __future__ import unicode_literals

from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion
import oscar.core.utils
import oscar.models.fields
import oscar.models.fields.autoslugfield


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('basket', '0007_slugfield_noop'),
        ('offer', '0003_auto_20161120_1707'),
    ]

    operations = [
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('Count', 'Depends on number of items in basket that are in condition range'), ('Value', 'Depends on value of items in basket that are in condition range'), ('Coverage', 'Needs to contain a set number of DISTINCT items from the condition range')], max_length=128, verbose_name='Type')),
                ('value', oscar.models.fields.PositiveDecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Value')),
                ('proxy_class', oscar.models.fields.NullCharField(default=None, max_length=255, verbose_name='Custom class')),
                ('range', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fee_conditions', to='offer.Range', verbose_name='Range')),
            ],
            options={
                'verbose_name': 'Condition',
                'default_related_name': 'fee_conditions',
                'verbose_name_plural': 'Conditions',
            },
        ),
        migrations.CreateModel(
            name='ConditionalFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="This is displayed within the customer's basket", max_length=128, unique=True, verbose_name='Name')),
                ('slug', oscar.models.fields.autoslugfield.AutoSlugField(blank=True, editable=False, max_length=128, populate_from='name', unique=True, verbose_name='Slug')),
                ('description', models.TextField(blank=True, help_text='This is displayed on the fee browsing page', verbose_name='Description')),
                ('offer_type', models.CharField(choices=[('Site', 'Site fee - available to all users'), ('User', 'User fee - available to certain types of user'), ('Session', 'Session offer - temporary offer, available for a user for the duration of their session')], default='Site', max_length=128, verbose_name='Type')),
                ('status', models.CharField(choices=[('Open', 'Open'), ('Suspended', 'Suspended'), ('Consumed', 'Consumed')], default='Open', max_length=64, verbose_name='Status')),
                ('start_datetime', models.DateTimeField(blank=True, null=True, verbose_name='Start date')),
                ('end_datetime', models.DateTimeField(blank=True, help_text="Fees are active until the end of the 'end date'", null=True, verbose_name='End date')),
                ('max_global_applications', models.PositiveIntegerField(blank=True, help_text='The number of times this fee can be used before it is unavailable', null=True, verbose_name='Max global applications')),
                ('max_user_applications', models.PositiveIntegerField(blank=True, help_text='The number of times a single user may get this fee', null=True, verbose_name='Max user applications')),
                ('max_basket_applications', models.PositiveIntegerField(blank=True, help_text='The number of times this fee can be applied to a basket (and order)', null=True, verbose_name='Max basket applications')),
                ('max_fee', models.DecimalField(blank=True, decimal_places=2, help_text='When an fee has reached more to orders than this threshold, then the fee becomes unavailable', max_digits=12, null=True, verbose_name='Max fee')),
                ('total_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Fee')),
                ('num_applications', models.PositiveIntegerField(default=0, verbose_name='Number of applications')),
                ('num_orders', models.PositiveIntegerField(default=0, verbose_name='Number of Orders')),
                ('redirect_url', oscar.models.fields.ExtendedURLField(blank=True, verbose_name='URL redirect (optional)')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_oscar_fees.Condition', verbose_name='Condition')),
            ],
            options={
                'verbose_name': 'Conditional fee',
                'ordering': ['-date_created'],
                'verbose_name_plural': 'Conditional fees',
            },
        ),
        migrations.CreateModel(
            name='Fee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, choices=[('Percentage', "Discount is a percentage off of the product's value"), ('Absolute', "Discount is a fixed amount off of the product's value"), ('Multibuy', 'Discount is to give the cheapest product for free'), ('Fixed price', 'Get the products that meet the condition for a fixed price'), ('Shipping absolute', 'Discount is a fixed amount of the shipping cost'), ('Shipping fixed price', 'Get shipping for a fixed price'), ('Shipping percentage', 'Discount is a percentage off of the shipping cost')], max_length=128, verbose_name='Type')),
                ('value', oscar.models.fields.PositiveDecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Value')),
                ('max_affected_items', models.PositiveIntegerField(blank=True, help_text='Set this to prevent the discount consuming all items within the range that are in the basket.', null=True, verbose_name='Max Affected Items')),
                ('proxy_class', oscar.models.fields.NullCharField(default=None, max_length=255, verbose_name='Custom class')),
                ('range', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='offer.Range', verbose_name='Range')),
            ],
            options={
                'verbose_name': 'Fee',
                'verbose_name_plural': 'Fees',
            },
        ),
        migrations.CreateModel(
            name='FeeLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_currency', models.CharField(default=oscar.core.utils.get_default_currency, max_length=12, verbose_name='Currency')),
                ('price_excl_tax', models.DecimalField(decimal_places=2, max_digits=12, null=True, verbose_name='Price excl. Tax')),
                ('price_incl_tax', models.DecimalField(decimal_places=2, max_digits=12, null=True, verbose_name='Price incl. Tax')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Quantity')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date Created')),
                ('basket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_lines', to='basket.Basket', verbose_name='Basket')),
                ('fee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='basket_lines', to='django_oscar_fees.Fee', verbose_name='Fee')),
            ],
            options={
                'verbose_name': 'Basket fee',
                'ordering': ['date_created', 'pk'],
                'verbose_name_plural': 'Basket fees',
            },
        ),
        migrations.AddField(
            model_name='conditionalfee',
            name='fee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_oscar_fees.Fee', verbose_name='Fee'),
        ),
    ]
